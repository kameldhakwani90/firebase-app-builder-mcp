/**
 * üé≠ PRIXIGRAD.IO - MCP Orchestrator
 * 
 * Orchestrateur central des agents MCP pour transformation de projets
 */

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const Logger = require('./logger');
const ConfigManager = require('./config');

class MCPOrchestrator {
  constructor() {
    this.logger = new Logger('MCPOrchestrator');
    this.configManager = new ConfigManager();
    
    // Agents MCP disponibles et leurs configurations
    this.agents = {
      filesystem: {
        package: '@modelcontextprotocol/server-filesystem',
        command: 'npx',
        args: ['-y', '@modelcontextprotocol/server-filesystem'],
        capabilities: ['read_file', 'write_file', 'list_directory', 'create_directory'],
        description: 'Agent de gestion des fichiers et r√©pertoires'
      },
      postgres: {
        package: '@modelcontextprotocol/server-postgres',
        command: 'npx',
        args: ['-y', '@modelcontextprotocol/server-postgres'],
        capabilities: ['connect_db', 'execute_query', 'create_table', 'migrate'],
        description: 'Agent de gestion PostgreSQL'
      },
      prisma: {
        package: 'prisma',
        command: 'npx',
        args: ['-y', 'prisma'],
        capabilities: ['generate_schema', 'migrate', 'seed', 'introspect'],
        description: 'ORM Prisma pour gestion base de donn√©es'
      },
      'sequential-thinking': {
        package: '@modelcontextprotocol/server-sequential-thinking',
        command: 'npx', 
        args: ['-y', '@modelcontextprotocol/server-sequential-thinking'],
        capabilities: ['plan', 'analyze', 'reason', 'document'],
        description: 'Agent de planification et analyse s√©quentielle'
      },
      git: {
        package: '@modelcontextprotocol/server-git',
        command: 'npx',
        args: ['-y', '@modelcontextprotocol/server-git'],
        capabilities: ['clone', 'commit', 'push', 'branch', 'merge'],
        description: 'Agent de gestion Git'
      }
    };

    // Sessions MCP actives
    this.activeSessions = new Map();
    
    // Queue des t√¢ches
    this.taskQueue = [];
    this.isProcessing = false;
  }

  /**
   * D√©marre une session MCP avec un agent sp√©cifique
   */
  async startMCPSession(agentName, options = {}) {
    try {
      const agent = this.agents[agentName];
      if (!agent) {
        throw new Error(`Agent MCP inconnu: ${agentName}`);
      }

      const sessionId = this.generateSessionId(agentName);
      this.logger.info(`üé≠ D√©marrage session MCP: ${agentName} (${sessionId})`);

      // Configuration de la session
      const sessionConfig = {
        agent: agentName,
        sessionId,
        startTime: new Date().toISOString(),
        options,
        status: 'starting'
      };

      // Communication via Claude Code avec l'agent MCP
      const claudeProcess = await this.spawnClaudeWithMCP(agent, options, sessionId);
      
      sessionConfig.process = claudeProcess;
      sessionConfig.status = 'active';
      
      this.activeSessions.set(sessionId, sessionConfig);
      
      this.logger.success(`‚úÖ Session MCP active: ${agentName} (${sessionId})`);
      return sessionId;

    } catch (error) {
      this.logger.error(`‚ùå Erreur session MCP ${agentName}`, error);
      throw error;
    }
  }

  /**
   * Ex√©cute une t√¢che avec un agent MCP sp√©cifique
   */
  async executeWithMCP(agentName, task, params = {}) {
    try {
      this.logger.info(`üéØ Ex√©cution t√¢che MCP: ${task} avec ${agentName}`);

      // D√©marrer session si n√©cessaire
      let sessionId = this.findActiveSession(agentName);
      if (!sessionId) {
        sessionId = await this.startMCPSession(agentName, params);
      }

      const session = this.activeSessions.get(sessionId);
      if (!session) {
        throw new Error(`Session MCP introuvable: ${sessionId}`);
      }

      // Construire le prompt MCP sp√©cifique
      const mcpPrompt = this.buildMCPPrompt(agentName, task, params);
      
      // Ex√©cuter via Claude Code + MCP
      const result = await this.sendMCPCommand(session, mcpPrompt);
      
      this.logger.success(`‚úÖ T√¢che MCP termin√©e: ${task}`);
      return {
        success: true,
        sessionId,
        agent: agentName,
        task,
        result,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      this.logger.error(`‚ùå Erreur t√¢che MCP ${task}`, error);
      return {
        success: false,
        agent: agentName,
        task,
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Pipeline de transformation en 8 √©tapes avec orchestration MCP
   */
  async orchestrateTransformation(projectData) {
    try {
      this.logger.banner(`ORCHESTRATION TRANSFORMATION - ${projectData.name}`);
      
      const pipeline = this.createTransformationPipeline(projectData);
      const results = {
        projectId: projectData.id || this.generateProjectId(projectData.name),
        projectName: projectData.name,
        startTime: new Date().toISOString(),
        steps: [],
        success: false,
        error: null
      };

      // Ex√©cution s√©quentielle des 8 √©tapes
      for (let i = 0; i < pipeline.length; i++) {
        const step = pipeline[i];
        
        try {
          this.logger.info(`üîÑ √âtape ${i + 1}/8: ${step.title}`);
          
          // Notification temps r√©el
          this.notifyStepStart(results.projectId, i + 1, step.title);
          
          // Ex√©cution de l'√©tape avec l'agent MCP appropri√©
          const stepResult = await this.executeTransformationStep(step, results);
          
          results.steps.push({
            stepNumber: i + 1,
            title: step.title,
            agent: step.agent,
            success: stepResult.success,
            result: stepResult.result,
            error: stepResult.error,
            duration: stepResult.duration,
            timestamp: new Date().toISOString()
          });

          if (!stepResult.success) {
            throw new Error(`√âtape ${i + 1} √©chou√©e: ${stepResult.error}`);
          }

          // Notification progression
          this.notifyStepComplete(results.projectId, i + 1, Math.round((i + 1) / 8 * 100));

        } catch (stepError) {
          this.logger.error(`‚ùå √âtape ${i + 1} √©chou√©e`, stepError);
          results.error = stepError.message;
          this.notifyTransformationError(results.projectId, stepError.message);
          break;
        }
      }

      results.success = results.steps.length === 8 && results.steps.every(s => s.success);
      results.endTime = new Date().toISOString();
      results.duration = new Date(results.endTime) - new Date(results.startTime);

      if (results.success) {
        this.logger.success(`üéâ Transformation termin√©e: ${projectData.name}`);
        this.notifyTransformationComplete(results.projectId, results);
      } else {
        this.logger.error(`‚ùå Transformation √©chou√©e: ${projectData.name}`);
      }

      return results;

    } catch (error) {
      this.logger.error('‚ùå Erreur orchestration transformation', error);
      throw error;
    }
  }

  /**
   * Cr√©e le pipeline de transformation en 8 √©tapes
   */
  createTransformationPipeline(projectData) {
    return [
      {
        title: 'Analyse Projet',
        agent: 'filesystem',
        task: 'analyze_project_structure',
        description: 'Analyse compl√®te de la structure du projet',
        estimatedDuration: '2 minutes'
      },
      {
        title: 'Sp√©cifications Techniques',
        agent: 'sequential-thinking',
        task: 'generate_technical_specs',
        description: 'G√©n√©ration des sp√©cifications techniques d√©taill√©es',
        estimatedDuration: '3 minutes'
      },
      {
        title: 'Sch√©ma Prisma',
        agent: 'prisma',
        task: 'generate_prisma_schema',
        description: 'Cr√©ation du sch√©ma Prisma avec relations',
        estimatedDuration: '2 minutes'
      },
      {
        title: 'Base de Donn√©es',
        agent: 'postgres',
        task: 'setup_database',
        description: 'Configuration PostgreSQL et migrations',
        estimatedDuration: '3 minutes'
      },
      {
        title: 'Super Admin & Seed',
        agent: 'prisma',
        task: 'create_admin_and_seed',
        description: 'Cr√©ation super admin et donn√©es de d√©monstration',
        estimatedDuration: '2 minutes'
      },
      {
        title: 'Backend APIs',
        agent: 'filesystem',
        task: 'generate_backend_apis',
        description: 'G√©n√©ration des APIs REST et middleware',
        estimatedDuration: '4 minutes'
      },
      {
        title: 'Frontend Connection',
        agent: 'filesystem',
        task: 'connect_frontend_apis',
        description: 'Connexion frontend aux APIs r√©elles',
        estimatedDuration: '3 minutes'
      },
      {
        title: 'D√©ploiement',
        agent: 'git',
        task: 'deploy_production',
        description: 'D√©ploiement et push branche production',
        estimatedDuration: '2 minutes'
      }
    ];
  }

  /**
   * Ex√©cute une √©tape de transformation sp√©cifique
   */
  async executeTransformationStep(step, contextResults) {
    const startTime = Date.now();
    
    try {
      // Pr√©parer les param√®tres pour l'agent MCP
      const params = {
        step: step.title,
        task: step.task,
        context: contextResults,
        projectData: contextResults.projectData || {}
      };

      // Ex√©cuter avec l'agent MCP appropri√©
      const result = await this.executeWithMCP(step.agent, step.task, params);
      
      const duration = Date.now() - startTime;
      
      return {
        success: result.success,
        result: result.result,
        error: result.error,
        duration: `${Math.round(duration / 1000)}s`,
        agent: step.agent
      };

    } catch (error) {
      const duration = Date.now() - startTime;
      return {
        success: false,
        result: null,
        error: error.message,
        duration: `${Math.round(duration / 1000)}s`,
        agent: step.agent
      };
    }
  }

  /**
   * Spawn Claude Code avec agent MCP (OBLIGATOIRE)
   */
  async spawnClaudeWithMCP(agent, options, sessionId) {
    return new Promise((resolve, reject) => {
      // Claude Code OBLIGATOIRE - pas de fallback
      const { execSync } = require('child_process');
      
      try {
        // V√©rifier que Claude Code est disponible
        execSync('which claude', { stdio: 'ignore' });
      } catch (error) {
        reject(new Error('Claude Code requis mais non trouv√©. Installez Claude Code depuis https://claude.ai/code'));
        return;
      }
      
      // Commande Claude Code avec configuration MCP
      const claudeArgs = [
        '--mcp-config', this.getMCPConfigPath(),
        '--session-id', sessionId,
        '--print'
      ];

      // Envoyer imm√©diatement le prompt pour analyse
      const analysisPrompt = this.buildMCPPrompt(agent.name, 'analyze_project_structure', {
        github_url: options.github_url || '',
        github_token: options.github_token || ''
      });

      const claudeProcess = spawn('claude', claudeArgs.concat([analysisPrompt]), {
        stdio: ['pipe', 'pipe', 'pipe'],
        env: {
          ...process.env,
          MCP_AGENT: agent.package,
          MCP_SESSION: sessionId
        }
      });

      let stdout = '';
      let stderr = '';

      claudeProcess.stdout.on('data', (data) => {
        const output = data.toString();
        stdout += output;
        this.logger.debug(`[Claude STDOUT] ${output.trim()}`);
      });

      claudeProcess.stderr.on('data', (data) => {
        const error = data.toString();
        stderr += error;
        this.logger.debug(`[Claude STDERR] ${error.trim()}`);
      });

      claudeProcess.on('close', (code) => {
        this.logger.debug(`Claude process closed with code ${code}`);
        if (code === 0) {
          // Cr√©er un objet mock process avec les r√©sultats
          resolve({
            stdout: { on: () => {}, emit: (event, data) => {} },
            stderr: { on: () => {} },
            stdin: { write: () => {}, end: () => {} },
            kill: () => {},
            on: () => {},
            _output: stdout,
            _error: stderr
          });
        } else {
          reject(new Error(`Claude Code + MCP failed (code ${code}): ${stderr}`));
        }
      });

      claudeProcess.on('error', (error) => {
        reject(new Error(`Erreur spawn Claude + MCP: ${error.message}`));
      });

      // Timeout de s√©curit√© augment√© pour analyse compl√®te
      setTimeout(() => {
        claudeProcess.kill('SIGTERM');
        reject(new Error('Timeout spawn Claude + MCP (6 minutes)'));
      }, 360000); // 6 minutes
    });
  }

  /**
   * G√©n√®re le chemin vers la configuration MCP
   */
  getMCPConfigPath() {
    const os = require('os');
    const path = require('path');
    return path.join(os.homedir(), '.config', 'claude', 'mcp_servers.json');
  }

  /**
   * Envoie une commande √† une session MCP active
   */
  async sendMCPCommand(session, prompt) {
    return new Promise((resolve, reject) => {
      if (!session.process) {
        return reject(new Error('Processus MCP non trouv√©'));
      }

      // Si c'est notre processus modifi√© avec _output, utiliser directement
      if (session.process._output) {
        resolve({
          output: session.process._output,
          error: session.process._error || '',
          success: !session.process._error
        });
        return;
      }

      let response = '';
      let errorOutput = '';

      // √âcouter la r√©ponse
      session.process.stdout.on('data', (data) => {
        response += data.toString();
      });

      session.process.stderr.on('data', (data) => {
        errorOutput += data.toString();
      });

      // Envoyer le prompt
      session.process.stdin.write(prompt + '\n');

      // Timeout et r√©solution pour analyse compl√®te
      const timeout = setTimeout(() => {
        resolve({
          output: response,
          error: errorOutput,
          success: true
        });
      }, 360000); // 6 minutes

      session.process.on('close', () => {
        clearTimeout(timeout);
        resolve({
          output: response,
          error: errorOutput,
          success: errorOutput.length === 0
        });
      });
    });
  }

  /**
   * Construction du prompt MCP sp√©cifique
   */
  buildMCPPrompt(agentName, task, params) {
    const agent = this.agents[agentName];
    
    // Pour l'analyse de projet, utiliser Claude Code natif avec analyse approfondie
    if (task === 'analyze_project_structure') {
      return `Tu es Claude Code avec acc√®s aux agents MCP. Tu dois analyser le projet GitHub de mani√®re APPROFONDIE.

URL GITHUB: ${params.github_url}
TOKEN: ${params.github_token || 'non fourni'}

üéØ MISSION: Analyse PROFESSIONNELLE compl√®te pour PRIXIGRAD.IO

üìã RETOURNER UN JSON AVEC CES SECTIONS COMPL√àTES:

{
  "projectName": "nom du projet",
  "type": "type business d√©tect√© (e-commerce, blog, dashboard, etc.)",
  "framework": "framework d√©tect√©",
  "pages": [
    {
      "name": "nom de la page",
      "route": "/chemin/route",
      "mainFunctionality": "description d√©taill√©e de la fonctionnalit√© principale",
      "businessContext": "contexte m√©tier sp√©cifique √† cette page",
      "hasAuth": true/false,
      "usesStaticData": true/false,
      "detectedComponents": [
        {
          "name": "nom composant",
          "type": "type (form, list, card, etc.)",
          "description": "description d√©taill√©e",
          "functionality": "fonctionnalit√© m√©tier",
          "userActions": ["action1", "action2"]
        }
      ],
      "specificFeatures": [
        {
          "feature": "nom de la fonctionnalit√©",
          "description": "description d√©taill√©e",
          "businessLogic": "logique m√©tier associ√©e",
          "technicalRequirements": ["req1", "req2"]
        }
      ],
      "dataModels": [
        {
          "modelName": "nom du mod√®le",
          "fields": [
            {
              "name": "nom_champ",
              "type": "type_donn√©e",
              "description": "description du champ"
            }
          ],
          "businessRules": ["r√®gle1", "r√®gle2"]
        }
      ],
      "detectedActions": [
        {
          "action": "nom action (Create, Read, Update, Delete)",
          "description": "description de l'action",
          "apiNeeded": "POST /api/endpoint",
          "dataModel": "mod√®le concern√©",
          "status": "missing/exists/broken"
        }
      ],
      "hiddenComplexity": [
        {
          "complexity": "nom de la complexit√© cach√©e",
          "description": "description du probl√®me",
          "impact": "impact sur le d√©veloppement",
          "solution": "solution propos√©e"
        }
      ],
      "crudOperations": ["CREATE", "READ", "UPDATE", "DELETE"],
      "dataEntities": ["entit√©1", "entit√©2"],
      "corrections": ["correction1", "correction2"],
      "backendFunctions": [
        {
          "api": "GET /api/endpoint",
          "status": "missing/exists/broken"
        }
      ]
    }
  ],
  "structure": {
    "pages": [{"name": "PageName", "path": "/pages/file.js"}],
    "components": [{"name": "ComponentName", "path": "/components/file.js"}]
  },
  "transformationPlan": {
    "steps": [
      {
        "title": "√©tape",
        "description": "description",
        "tasks": ["t√¢che1", "t√¢che2"],
        "estimatedTime": "temps estim√©",
        "priority": "high/medium/low"
      }
    ]
  }
}

üß† ANALYSE APPROFONDIE REQUISE:
1. Clone/lit tout le code source
2. Comprend la logique m√©tier de chaque page
3. D√©tecte les patterns de donn√©es
4. Identifie les APIs mock√©es
5. Comprend l'architecture globale
6. Analyse les interactions utilisateur
7. D√©tecte les complexit√©s cach√©es
8. Propose des mod√®les de donn√©es Prisma

IMPORTANT: Cette analyse sera utilis√©e par l'utilisateur pour corriger/valider avant transformation automatique.

COMMENCE L'ANALYSE MAINTENANT:`;
    }
    
    // Pour les autres t√¢ches, utiliser les agents MCP sp√©cialis√©s
    if (!agent) {
      return `Analyze the GitHub repository ${params.github_url} and return a JSON analysis.`;
    }
    
    return `Tu es l'agent MCP ${agentName} (${agent.description}).

T√ÇCHE: ${task}
PARAM√àTRES: ${JSON.stringify(params, null, 2)}
CAPACIT√âS DISPONIBLES: ${agent.capabilities.join(', ')}

INSTRUCTIONS SP√âCIFIQUES:
${this.getAgentSpecificInstructions(agentName, task)}

IMPORTANT:
- Utilise exclusivement tes capacit√©s MCP natives
- Retourne des r√©sultats structur√©s en JSON quand possible
- Documente chaque action importante
- G√®re les erreurs gracieusement
- Communique le statut de progression

COMMENCE MAINTENANT:`;
  }

  /**
   * Instructions sp√©cifiques par agent et t√¢che
   */
  getAgentSpecificInstructions(agentName, task) {
    const instructions = {
      filesystem: {
        analyze_project_structure: `
1. Analyse r√©cursivement la structure du projet
2. Identifie les pages, composants, et patterns de donn√©es
3. D√©tecte les donn√©es mock√©es et les APIs factices
4. Retourne un JSON avec: business_type, pages_detected, mock_data_patterns`,
        
        generate_backend_apis: `
1. Cr√©e les routes API REST dans pages/api/
2. Impl√©mente les middlewares d'authentification
3. Connecte aux mod√®les Prisma existants
4. Ajoute validation et gestion d'erreurs`,
        
        connect_frontend_apis: `
1. Remplace les donn√©es mock√©es par les appels API
2. Ajoute les √©tats de loading et d'erreur
3. Impl√©mente la gestion des erreurs r√©seau
4. Teste les connexions API`
      },
      
      'sequential-thinking': {
        generate_technical_specs: `
1. Analyse les r√©sultats de l'√©tape pr√©c√©dente
2. G√©n√®re des sp√©cifications techniques d√©taill√©es
3. D√©finis l'architecture backend et les mod√®les de donn√©es
4. Planifie les int√©grations et le d√©ploiement`
      },
      
      prisma: {
        generate_prisma_schema: `
1. Cr√©e un schema.prisma complet avec relations
2. D√©finis les mod√®les bas√©s sur l'analyse du projet
3. Ajoute les indexes et contraintes n√©cessaires
4. Pr√©pare les migrations initiales`,
        
        create_admin_and_seed: `
1. Cr√©e un super administrateur avec le bon r√¥le
2. G√©n√®re des donn√©es de d√©monstration r√©alistes
3. Ex√©cute les seeds via Prisma
4. V√©rifie l'int√©grit√© des donn√©es`
      },
      
      postgres: {
        setup_database: `
1. Connecte √† la base PostgreSQL configur√©e
2. Ex√©cute les migrations Prisma
3. V√©rifie la structure des tables
4. Teste les connexions et permissions`
      },
      
      git: {
        deploy_production: `
1. Cr√©e une nouvelle branche 'prod-auto'
2. Commit tous les changements avec un message descriptif
3. Push la branche sur le remote
4. G√©n√®re un rapport de d√©ploiement`
      }
    };

    return instructions[agentName]?.[task] || 'Ex√©cute la t√¢che demand√©e avec les meilleures pratiques MCP.';
  }

  /**
   * Notifications temps r√©el pour l'interface web
   */
  notifyStepStart(projectId, stepNumber, stepTitle) {
    // Envoyer via Server-Sent Events
    this.sendSSENotification('transformation-progress', {
      projectId,
      step: stepNumber,
      totalSteps: 8,
      phase: stepTitle,
      progress: Math.round((stepNumber - 1) / 8 * 100),
      message: `D√©but ${stepTitle}`,
      timestamp: new Date().toISOString()
    });
  }

  notifyStepComplete(projectId, stepNumber, progress) {
    this.sendSSENotification('transformation-progress', {
      projectId,
      step: stepNumber,
      totalSteps: 8,
      progress,
      message: `√âtape ${stepNumber}/8 termin√©e`,
      timestamp: new Date().toISOString()
    });
  }

  notifyTransformationComplete(projectId, results) {
    this.sendSSENotification('transformation-complete', {
      projectId,
      message: 'Transformation termin√©e avec succ√®s',
      appUrl: results.deploymentUrl || `http://localhost:3000/project/${projectId}`,
      duration: results.duration,
      timestamp: new Date().toISOString()
    });
  }

  notifyTransformationError(projectId, error) {
    this.sendSSENotification('transformation-error', {
      projectId,
      error,
      message: `Erreur transformation: ${error}`,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * Envoi notifications SSE (int√©gration avec BridgeServer)
   */
  sendSSENotification(type, data) {
    // Cette m√©thode sera int√©gr√©e avec le BridgeServer
    // pour envoyer les notifications en temps r√©el
    this.logger.info(`üì° SSE: ${type}`, data);
  }

  /**
   * Utilitaires
   */
  generateSessionId(agentName) {
    // G√©n√©rer un UUID v4 valide pour Claude Code
    const crypto = require('crypto');
    return crypto.randomUUID();
  }

  generateProjectId(projectName) {
    return `proj_${projectName.toLowerCase().replace(/[^a-z0-9]/g, '_')}_${Date.now()}`;
  }

  findActiveSession(agentName) {
    for (const [sessionId, session] of this.activeSessions.entries()) {
      if (session.agent === agentName && session.status === 'active') {
        return sessionId;
      }
    }
    return null;
  }

  /**
   * Nettoyage des sessions
   */
  async cleanupSessions() {
    this.logger.info('üßπ Nettoyage sessions MCP...');
    
    for (const [sessionId, session] of this.activeSessions.entries()) {
      try {
        if (session.process) {
          session.process.kill('SIGTERM');
        }
        this.activeSessions.delete(sessionId);
      } catch (error) {
        this.logger.error(`Erreur nettoyage session ${sessionId}`, error);
      }
    }
    
    this.logger.success(`‚úÖ ${this.activeSessions.size} sessions nettoy√©es`);
  }

  /**
   * Arr√™t de l'orchestrateur
   */
  async stop() {
    this.logger.info('üõë Arr√™t MCPOrchestrator...');
    await this.cleanupSessions();
    this.logger.success('‚úÖ MCPOrchestrator arr√™t√©');
  }
}

module.exports = MCPOrchestrator;